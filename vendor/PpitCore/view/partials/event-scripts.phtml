/**
 * PpitCore V1.0 (https://github.com/p-pit/PpitCore)
 *
 * @link      https://github.com/p-pit/PpitCore
 * @copyright Copyright (c) 2016 Bruno Lartillot
 * @license   https://github.com/p-pit/PpitCore/blob/master/license.txt GNU-GPL license
 */


function connectRemoveIcon(id, target)
{
	$('#' + id).click(function () {
		$('#' + target).hide();
		filterEventList();
	});
}

function eventGetParams() {

	var params = '?', todo = true;

<?php foreach ($context->getConfig('event/search'.(($type) ? '/'.$type : ''))['main'] as $propertyId => $rendering) : ?>
	<?php 
	$property = $context->getConfig('event'.(($type) ? '/'.$type : ''))['properties'][$propertyId];
	if ($property['type'] == 'specific') $property = $context->getConfig($property['definition']);
	?>

	<?php if ($rendering == 'range') : ?>
	
	var min_<?php echo $propertyId ?> = document.getElementById('search_min_<?php echo $propertyId ?>').value;
	if (min_<?php echo $propertyId ?>) min_<?php echo $propertyId ?> = encodeDate(min_<?php echo $propertyId ?>);
	if (min_<?php echo $propertyId ?>.length >= 2) { params += 'min_<?php echo $propertyId ?>=' + min_<?php echo $propertyId ?> + '&'; todo = false; }

	var max_<?php echo $propertyId ?> = document.getElementById('search_max_<?php echo $propertyId ?>').value;
	if (max_<?php echo $propertyId ?>) max_<?php echo $propertyId ?> = encodeDate(max_<?php echo $propertyId ?>);
	if (max_<?php echo $propertyId ?>.length >= 2) { params += 'max_<?php echo $propertyId ?>=' + max_<?php echo $propertyId ?> + '&'; todo = false; }

	<?php else : ?>

		<?php if ($property['type'] == 'select') : ?>
	var <?php echo $propertyId ?> = document.getElementById('search_<?php echo $propertyId ?>').value;
	if (<?php echo $propertyId ?>) { params += '<?php echo $propertyId ?>=' + <?php echo $propertyId ?> + '&'; todo = false; }

		<?php else : ?>
	var <?php echo $propertyId ?> = document.getElementById('search_<?php echo $propertyId ?>').value;
	if (<?php echo $propertyId ?>.length >= 2) { params += '<?php echo $propertyId ?>=' + <?php echo $propertyId ?> + '&'; todo = false; }

		<?php endif;?>	
	<?php endif;?>

<?php endforeach;?>

	<?php
	$todoTitle = $context->getConfig('event/search'.(($type) ? '/'.$type : ''))['todoTitle'][$context->getLocale()];
	$searchTitle = $context->getConfig('event/search'.(($type) ? '/'.$type : ''))['searchTitle'][$context->getLocale()];
	?>
	$('#mode-text').text((todo) ? '<?php echo $todoTitle ?>' : '<?php echo $searchTitle ?>');

	return params;
}

// Export the list
function exportEventList() {

	var params = eventGetParams();
	document.location.href = '<?php echo $this->url('event/export') ?>' + '<?php echo (($type) ? '/'.$type : '') ?>' + params;
}

function eraseEventSearch() {

<?php foreach ($context->getConfig('event/search'.(($type) ? '/'.$type : ''))['main'] as $propertyId => $rendering) : ?>

	<?php if ($rendering == 'range') : ?>
	$('#search_min_<?php echo $propertyId ?>').val('');
	$('#search_max_<?php echo $propertyId ?>').val('');

	<?php else : ?>
	$('#search_<?php echo $propertyId ?>').val('');
	
	<?php endif;?>

<?php endforeach;?>

	getEventList(eventGetParams(), 'update_time', 'DESC');
}

function sortEventList(criterion) {

	var dir;
	ascCriterion = $('.glyphicon-triangle-top').first().parent().attr('id');
	descCriterion = $('.glyphicon-triangle-bottom').first().parent().attr('id');
	if (criterion + '-anchor' == ascCriterion) dir = 'DESC'; else dir = 'ASC';
	getEventList(eventGetParams(), criterion, dir);
}

function filterEventList() {

	ascCriterion = $('.glyphicon-triangle-top').first().parent().attr('id');
	descCriterion = $('.glyphicon-triangle-bottom').first().parent().attr('id');
	if (ascCriterion) {
		criterion = ascCriterion.split('-')[0];
		dir = 'ASC';
	}
	else {
		criterion = descCriterion.split('-')[0];
		dir = 'ASC';
	}
	getEventList(eventGetParams(), criterion, dir);
}

function connectEventSearchInputs() {

	$('#export-button').click(function () { exportEventList(); });
	$('#erase-button').click(function () {Â 
		document.location.href = '<?php echo $this->url('event/index') ?>'; 
	});

<?php foreach ($context->getConfig('event/search'.(($type) ? '/'.$type : ''))['main'] as $propertyId => $rendering) : ?>
	<?php
	$property = $context->getConfig('event'.(($type) ? '/'.$type : ''))['properties'][$propertyId];
	if ($property['type'] == 'specific') $property = $context->getConfig($property['definition']);
	?>

	<?php if ($propertyId == 'type') : ?>
		$('#search_<?php echo $propertyId ?>').change(function () { 
			document.location.href = '<?php echo $this->url('event/index') ?>/' + $('#search_type').val(); 
		});

	<?php elseif ($rendering == 'range') : ?>
		
		<?php if ($property['type'] == 'select') : ?>
	$('#search_min_<?php echo $propertyId ?>').keyup(function () { filterEventList(); });
	$('#search_max_<?php echo $propertyId ?>').keyup(function () { filterEventList(); });

		<?php else : ?>
	$('#search_min_<?php echo $propertyId ?>').change(function () { filterEventList(); });
	$('#search_max_<?php echo $propertyId ?>').change(function () { filterEventList(); });

		<?php endif;?>

		<?php if ($property['type'] == 'date') : ?>
	$("#search_min_<?php echo $propertyId ?>").datepicker();
	$("#search_max_<?php echo $propertyId ?>").datepicker();
		<?php endif;?>
	
	<?php else : ?>
		
		<?php if ($property['type'] == 'select') : ?>
	$('#search_<?php echo $propertyId ?>').change(function () { filterEventList(); });
	
		<?php else : ?>
	$('#search_<?php echo $propertyId ?>').keyup(function () { filterEventList(); });
	
		<?php endif;?>

		<?php if ($property['type'] == 'date') : ?>
	$("#search_<?php echo $propertyId ?>").datepicker();
		<?php endif;?>

	<?php endif;?>
<?php endforeach;?>
}

// Load the list
function getEventList(params, major, dir) {		

	// Execute the ajax request
	route = '<?php echo $this->url('event/list') ?>' + '<?php echo (($type) ? '/'.$type : '') ?>' + params + '&major=' + major + ((dir =='ASC') ? '&dir=ASC' : '&dir=DESC');
	xhttp = new XMLHttpRequest();
	xhttp.open("GET", route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
			document.getElementById('event-list-panel').innerHTML = xhttp.responseText;
			
			$(function () {
			    $('.tip').tooltip({
			        content: function () {
			            return $(this).prop('title');
			        }
			    });
			});
			
			// Connect the sort anchors
			$('.ppit-sort-anchor').each(function () {
				$(this).click(function () {
					sortEventList($(this).attr('id').split('-')[0]);
				});
			});
			
			// Connect the detail anchors
			$('.event-detail-anchor').each(function () {
				$(this).click(function () {
					getEventDetail($(this).attr('id').split('_')[1]);
				});
			});
<?php if (!$config['isTraceActive']) : ?>
			}
<?php endif;?>
		}
	}
	xhttp.send();
}

function connectAuditPanel()
{
	$('#audit-panel').hide();
	$('#audit-label').click(function () {
		if ($('#audit-label').text() == '<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>') {
			$('#audit-panel').show();
			$('#audit-label').text('<?php echo $this->translate('Mask', 'ppit-core', $context->getLocale()) ?>');
		}
		else {
			$('#audit-panel').hide();
			$('#audit-label').text('<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>');
		}
	});
}

<?php 
$properties = array();
foreach ($context->getConfig('event/update'.(($type) ? '/'.$type : '')) as $propertyId => $options) {
	$property = $context->getConfig('event'.(($type) ? '/'.$type : ''))['properties'][$propertyId];

	if (array_key_exists('updatable', $property) && $property['updatable']) {
		if ($property['type'] == 'specific') $property = $context->getConfig($property['definition']);

		if ($property['type'] == 'number') $properties[$propertyId] = array('type' => $property['type'], 'mandatory' => $options['mandatory'], 'minValue' => $property['minValue'], 'maxValue' => $property['maxValue']);
		else $properties[$propertyId] = array('type' => $property['type'], 'mandatory' => $options['mandatory'], 'maxSize' => ($property['type'] == 'textarea') ? 2047 : 255);
	}
}
$properties['event_update_time'] = array('type' => 'hidden');

echo $this->partial('/partials/check-update-properties', array('entity' => 'Event', 'context' => $context, 'properties' => $properties)) 
?>

function connectEventUpdateForm(id, action, target)
{
<?php foreach ($context->getConfig('event/update'.(($type) ? '/'.$type : '')) as $propertyId => $options) : ?>
	<?php 
	$property = $context->getConfig('event'.(($type) ? '/'.$type : ''))['properties'][$propertyId]; 
	if ($property['type'] == 'specific') $property = $context->getConfig($property['definition']);
	if ($property['type'] == 'date') : ?>
		$('#input_<?php echo $propertyId ?>').datepicker();
	<?php endif;?>
<?php endforeach ?>

	var form = document.getElementById('ppit-form');
	form.onsubmit = function(event) {
		event.preventDefault();
	
		// Check validity
		var validity = checkEventUpdateProperties(id);
		if (validity) {
		
			// Create a new FormData object.
			var formData = new FormData();
			
			// Get the properties values
<?php foreach ($properties as $propertyId => $property) : ?>

	<?php if ($property['type'] == 'checkbox') : ?>
			formData.append('<?php echo $propertyId ?>', ((document.getElementById('<?php echo $propertyId ?>').checked) ? 1 : 0));

	<?php elseif ($property['type'] == 'attachment') : ?>
			var fileSelect = document.getElementById('<?php echo $propertyId ?>');
			if (fileSelect) {
				var files = fileSelect.files;
				for (var i = 0; i < files.length; i++) {
					var file = files[i];
					formData.append('<?php echo $propertyId ?>', file, file.name);
				}
			}

	<?php else : ?>
			formData.append('<?php echo $propertyId ?>', document.getElementById('<?php echo $propertyId ?>').value);

	<?php endif ?>

<?php endforeach ?>

			var xhttp = new XMLHttpRequest();
			var route;
			route = '<?php echo $this->url('event/update') ?>' + '/' + id;
			if (action) route += '/' + action;
			xhttp.open('POST', route, true);
			// Set up a handler for when the request finishes.
			xhttp.onload = function () {
				if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
				if (xhttp.readyState == 4) {
			<?php if (!$config['isTraceActive']) : ?>
					if (xhttp.status == 200) {
			<?php endif;?>
					document.getElementById(target).innerHTML = xhttp.responseText;
					filterEventList();
					connectEventUpdateForm(id, action, target);
					$('.action-btn').removeClass('btn-primary').addClass('btn-default');
			<?php if (!$config['isTraceActive']) : ?>
					}
			<?php endif;?>
				}
			};
			xhttp.send(formData);
		}
		else return false;
	}
}

function getEventUpdate(id, action, target) {

	var xhttp = new XMLHttpRequest();
	var route = '<?php echo $this->url('event/update') ?>' + '/' + id;
	if (action) route += '/' + action;

	xhttp.open('GET', route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
			document.getElementById(target).innerHTML = xhttp.responseText;

			if (id) {
				$('#event-update-anchor').click(function () { getEventUpdate(id, 'update', target); });
				$('#event-delete-anchor').click(function () { getEventUpdate(id, 'delete', target); });
			}
			else $('#event-add-anchor').click(function () { getEventUpdate(id, 'add', target); });
			connectEventUpdateForm(id, action, target);
<?php if (!$config['isTraceActive']) : ?>
			}
<?php endif;?>
		}
	}
	xhttp.send();

	// Highlight the clicked button (and only it in its class)
	$('.action-btn').removeClass("btn-primary").addClass("btn-default");
	if (action == 'update') $('#event-update-anchor').removeClass("btn-default").addClass("btn-primary");
	else if (action == 'delete') $('#event-delete-anchor').removeClass("btn-default").addClass("btn-primary");
}

// Load the detail panel
function getEventDetail(id) {

	// Ensure the target is displayed
	$('#form_action').show();

	// Anchor to the new panel
	$(location).attr('hash', 'form_action');

	var route = '<?php echo $this->url('event/detail') ?>' + '/' + id;

	// Execute the ajax request
	xhttp = new XMLHttpRequest();
	xhttp.open("GET", route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
			document.getElementById('form_action').innerHTML = xhttp.responseText;
			
			connectAuditPanel();
			connectRemoveIcon('remove-anchor', 'form_action');

			getEventUpdate(id, '', 'event-update-panel');
	<?php if (!$config['isTraceActive']) : ?>
			}
	<?php endif;?>
		}
	}
	xhttp.send();

	// Highlight the clicked button (and only it in its class)
	$('.index-btn').removeClass("btn-primary").addClass("btn-default");
	$('#event-detail-anchor_' + id).removeClass("btn-default").addClass("btn-primary");
}
/*
function showChart(target) {
	var chart = new CanvasJS.Chart(target,
	{
		title:{
			text: "<?php echo 'CatÃ©gories' ?>"
		},
                animationEnabled: true,
		data: [
		{
			type: "doughnut",
			startAngle: 60,
			toolTipContent: "{legendText}: {y} - <strong>#percent% </strong>",
			showInLegend: true,
          explodeOnClick: false, //**Change it to true
			dataPoints: [
<?php foreach ($distribution as $value => $number) : ?>
				{y: <?php echo $number ?>, indexLabel: "<?php echo $value ?> #percent%", legendText: "<?php echo $value ?>" },
<?php endforeach;?>
			]
		}
		]
	});
	chart.render();
}
*/
function showChart(target) {
    var option = {
    responsive: true,
    };
   
    var ctx = document.getElementById(target).getContext('2d');

<?php $colors = array('#F7464A', '#46BFBD', '#FDB45C') ?>
<?php $highlights = array('#FF5A5E', '#5AD3D1', '#FFC870') ?>

var data = [
<?php $first = true; $i=0; foreach ($distribution as $value => $number) : ?>
    <?php if (!$first) echo ',' ?> {
        value: <?php echo $number ?>,
        color:"<?php echo $colors[$i] ?>",
        highlight: "<?php echo $highlights[$i] ?>",
        label: "<?php echo $value ?>"
    }
<?php $first = false; $i++; endforeach; ?>
]
var myDoughnutChart = new Chart(ctx).Doughnut(data,option);
}

function getEventSearch()
{
	// Hide the other panels
	$('.ppit-panel').hide();
	$('#index_action').show();
	// Anchor to the main panel
	$(location).attr('hash', '#');
	var xhttp = new XMLHttpRequest();
	xhttp.open("GET", '<?php echo $this->url('event/search') ?>' + '<?php echo (($type) ? '/'.$type : '') ?>', false);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4) {
	<?php if (!$config['isTraceActive']) : ?>
			if (xhttp.status == 200) {
	<?php endif;?>
				document.getElementById('index_action').innerHTML = xhttp.responseText;
				showChart("doughnutChart");
				<?php
				$todoTitle = $context->getConfig('event/search'.(($type) ? '/'.$type : ''))['todoTitle'][$context->getLocale()];
				?>
				$('#mode-text').text('<?php echo $todoTitle ?>');
				connectEventSearchInputs();
	<?php if (!$config['isTraceActive']) : ?>
			}
	<?php endif;?>
		}
	}
	xhttp.send();
}

function activateEvent() {
	getEventSearch();
	$('.menu-btn').removeClass("btn-primary").addClass("btn-default");
	$('#event-anchor').removeClass("btn-default").addClass("btn-primary");
	getEventList('?', 'update_time', 'DESC');
}
