<script>  
/**
 * PpitCore V1.0 (https://github.com/p-pit/PpitCore)
 *
 * @link      https://github.com/p-pit/PpitCore
 * @copyright Copyright (c) 2016 Bruno Lartillot
 * @license   https://github.com/p-pit/PpitCore/blob/master/license.txt GNU-GPL license
 */


  $.datepicker.regional['fr'] = {
    prevText: '<?php echo $this->translate('Previous', 'ppit-core', $context->getLocale()); ?>',
    nextText: '<?php echo $this->translate('Next', 'ppit-core', $context->getLocale()); ?>',
    monthNames: ['<?php echo $this->translate('January', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('February', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('March', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('April', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('May', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('June', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('July', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('August', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('September', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('October', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('November', 'ppit-core', $context->getLocale()); ?>',
    			 '<?php echo $this->translate('December', 'ppit-core', $context->getLocale()); ?>'],
    dayNamesMin: ['<?php echo $this->translate('Su', 'ppit-core', $context->getLocale()); ?>',
	    		  '<?php echo $this->translate('Mo', 'ppit-core', $context->getLocale()); ?>',
    			  '<?php echo $this->translate('Tu', 'ppit-core', $context->getLocale()); ?>',
    			  '<?php echo $this->translate('We', 'ppit-core', $context->getLocale()); ?>',
    			  '<?php echo $this->translate('Th', 'ppit-core', $context->getLocale()); ?>',
    			  '<?php echo $this->translate('Fr', 'ppit-core', $context->getLocale()); ?>',
    			  '<?php echo $this->translate('Sa', 'ppit-core', $context->getLocale()); ?>'],
   	dateFormat: 'dd/mm/yy',
    firstDay: 1,
    isRTL: false,
    yearSuffix: ''
};
$.datepicker.setDefaults($.datepicker.regional['fr']);


// checkNumber returns null if the given number is valid, else a localized error message
function checkNumber(number, min, max) {
	
	// Regex for localized number formats
	var numberFormat = /^-?\d+(\,?\d+)?$/;
	var numberFormat2 = /^-?\d+(\.?\d+)?$/;

	if (min <= 0 && !number) return null;
	
	if (!numberFormat.test(number) && !numberFormat2.test(number)) {
		return "<?php echo $this->translate('The number format is invalid', 'ppit-core', $context->getLocale()); ?>";
	}

	if (number.indexOf(',') >= 0) {
		number = number.split(',');
		number = number[0] + '.' + number[1];
	}
	else if (number.indexOf('.') >= 0) {
		number = number.split('.');
		number = number[0] + '.' + number[1];
	}
	number = parseFloat(number);
	if (number < min) {
	   	return "<?php echo $this->translate('Too little value', 'ppit-core', $context->getLocale()); ?>";
	}
	else if (number > max) {
		return "<?php echo $this->translate('Too big value', 'ppit-core', $context->getLocale()); ?>";
	}
	else return null;
}

function getNumber(number, precision) {

	var power = 1;
	for (i = 0; i < precision; i++) power *= 10;

	if (number.indexOf('.') >= 0) {
		number = number.split('.');
		number = number[0] + '.' + number[1];
	}
	else if (number.indexOf(',') >= 0) {
		number = number.split(',');
		number = number[0] + '.' + number[1];
	}
	return Math.round(parseFloat(number * power)) / power;
}

// checkDate returns null if the given date is valid, else a localized error message
function checkDate(date) {

	<?php // $context->dateFormat() returns a localized array giving the year, month and day (in this order) index in the date 
		$dateFormat = $context->dateFormat();
		?>
	// Regex for localized date formats
	<?php if ($dateFormat[0] == 0 && $dateFormat[1] == 1 && $dateFormat[2] == 2) : ?>
	    var dateFormat = /^\d{4}[\/.]\d{1,2}[\/.]\d{1,2}$/;
	<?php else : ?>
	    var dateFormat = /^\d{1,2}[\/.]\d{1,2}[\/.]\d{4}$/;
	<?php endif;?>
	
	if(!dateFormat.test(date)) {
		return "<?php echo $this->translate('The date format should be mm/dd/yyyy', 'ppit-core', $context->getLocale()); ?>";
	}
	else {
	    date = date.split('/');
	    date[<?php echo $dateFormat[1] ?>] -=1; // Adjust month
	    var testDate = new Date();
	    testDate.setFullYear(date[<?php echo $dateFormat[0] ?>]);
	    testDate.setMonth(date[<?php echo $dateFormat[1] ?>]);
	    testDate.setDate(date[<?php echo $dateFormat[2] ?>]);
/*	    if(testDate.getFullYear() != date[<?php echo $dateFormat[0] ?>] ||
	 	   testDate.getMonth() != date[<?php echo $dateFormat[1] ?>] ||
	       testDate.getDate() != date[<?php echo $dateFormat[2] ?>]) {
		       
			return "<?php echo $this->translate('This date does not exist', 'ppit-core', $context->getLocale()); ?>";
		}
	    else return null;*/
	}
}

//checkDate returns null if the given date is valid, else a localized error message
function checkTime(time) {

	// Regex for time
	timeFormat = new RegExp("^(([0-1]?[0-9])|([2][0-3])):([0-5]?[0-9])(:([0-5]?[0-9]))?$");
		
	if(!timeFormat.test(time)) return "<?php echo $this->translate('The time is invalid', 'ppit-core', $context->getLocale()); ?>";
	else return null;
}

// checkEmail returns null if the given email is valid, else a localized error message
function checkEmail(value) {

	// Regex for email format
	var emailFormat = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
	
	if(!emailFormat.test(value)) {
		return "<?php echo $this->translate('Invalid email format', 'ppit-core', $context->getLocale()); ?>";
	}
    return null;
}

// checkPhone returns null if the given phone number is valid, else a localized error message
function checkPhone(value) {

	// Regex for phone format
	var phoneFormat = /^\+?([0-9\. ]*)$/;
	
	if(!phoneFormat.test(value)) {
		return "<?php echo $this->translate('Invalid phone format', 'ppit-core', $context->getLocale()); ?>";
	}
  return null;
}

function encodeDate(value) {

	<?php // $context->dateFormat() returns a localized array giving the year, month and day (in this order) index in the date 
		$dateFormat = $context->dateFormat() ?>

	<?php if ($dateFormat[0] == 0 && $dateFormat[1] == 1 && $dateFormat[2] == 2) : ?>
		return value.substr(0, 4) + "-" + value.substr(5, 2) + "-" + value.substr(8, 2);
	<?php elseif ($dateFormat[0] == 1 && $dateFormat[1] == 2 && $dateFormat[2] == 0) : ?>
		return value.substr(6, 4) + "-" + value.substr(0, 2) + "-" + value.substr(3, 2);
	<?php else : ?>
		return value.substr(6, 4) + "-" + value.substr(3, 2) + "-" + value.substr(0, 2);
	<?php endif;?>
}

function renderElement(elementId, error) {
	if (error) {
		document.getElementById(elementId + "_group").className = "form-group has-error";
		document.getElementById(elementId + "_error").innerHTML = error;
		document.getElementById(elementId + "_error").style.display = "block";
		document.getElementById(elementId).focus();
	}
	else if (document.getElementById(elementId + "_group")) {
		document.getElementById(elementId + "_group").className = "form-group";
		document.getElementById(elementId + "_error").innerHTML = "";
    	document.getElementById(elementId + "_error").style.display = "none";
	}
}

</script>
