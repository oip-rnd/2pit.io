<?php echo $this->partial('/partials/search-scripts-v2') ?>

<script>
/**
 * PpitCore V1.0 (https://github.com/p-pit/PpitCore)
 *
 * @link      https://github.com/p-pit/PpitCore
 * @copyright Copyright (c) 2016 Bruno Lartillot
 * @license   https://github.com/p-pit/PpitCore/blob/master/license.txt GNU-GPL license
 */

var criterion = 'caption', dir = 'ASC';

function getProductSearch()
{
  var xhttp = new XMLHttpRequest();
  xhttp.open("GET", '<?php echo $this->url('product/searchV2', array('type' => $type)) ?>', false);
  xhttp.onreadystatechange = function() {
    if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
    if (xhttp.readyState == 4 && xhttp.status == 200) {
      document.getElementById('index_panel').innerHTML = xhttp.responseText;

      $('#mode-text').text('<?php echo $this->translate('Available', 'ppit-core', $context->getLocale()); ?>');
      
      // Connect the erase button that reset all the search engine inputs and checks and refresh the list
      $('#erase-button').click(function() {
        $('.search_input').val('');
        $('.search_selectpicker').selectpicker('refresh');
        $('.search_check_value').val('0');
        $('.search_check').removeClass('btn-secondary').addClass('btn-default').removeClass('active');
        $('#erase-button').removeClass('btn-success').addClass('btn-default');
        $('#erase-button').attr('disabled', 'disabled');
        getProductList(getSearchParams(''));
      });

      $('.search_selectpicker').selectpicker('refresh');

      // Connect the date picker on date inputs
      $('.search_input_date').datepicker();

      // Trigger the change event on search inputs and refresh the list
      $('.search_input').change(function () {
        if ($(this).attr('id')) {
          var propertyId = $(this).attr('id').split('-')[1];
          $('#erase-button').removeClass('btn-default').addClass('btn-success');
          $('#erase-button').attr('disabled', false);
          $('#search_check-' + propertyId).removeClass('btn-default').addClass('btn-secondary').addClass('active');
          $('#search_check_value-' + propertyId).val('1');
	      getProductList(getSearchParams(''));
        }
      }); 

      // Trigger the keyup event on search inputs and refresh the list
      $('.search_input').keyup(function () {
        if ($(this).attr('id')) {
          if ($(this).val().length > 2) {
            var propertyId = $(this).attr('id').split('-')[1];
            $('#erase-button').removeClass('btn-default').addClass('btn-success');
            $('#erase-button').attr('disabled', false);
            $('#search_check-' + propertyId).removeClass('btn-default').addClass('btn-secondary').addClass('active');
            $('#search_check_value-' + propertyId).val('1');
            getProductList(getSearchParams(''));
          }
        }
      });

      // Trigger the click event on per-property checks (allowing to search on empty values) and refresh the list
      $('.search_check').click(function() {
        $('#erase-button').removeClass('btn-default').addClass('btn-success');
        $('#erase-button').attr('disabled', false);
        var propertyId = $(this).attr('id').split('-')[1], check = 'search_check_value-' + propertyId;
        if ($('#' + check).val() == '1') {
          $(this).removeClass('btn-secondary').addClass('btn-default').removeClass('active');
          $('#' + check).val('0');
          $('#search-' + propertyId).val('');
          $('#search_min-' + propertyId).val('');
          $('#search_max-' + propertyId).val('');
        $('#search-' + propertyId).selectpicker('refresh');
        }
        else {
          $(this).removeClass('btn-default').addClass('btn-secondary').addClass('active');
          $('#' + check).val('1');
        }
        getProductList(getSearchParams(''));
      });

      getProductList(getSearchParams(''));
    }
  }
  xhttp.send();
}

// Export the list
function productExport() {

	var params = getSearchParams('');
	document.location.href = '<?php echo $this->url('product/export', ['type' => $type]) ?>' + params;
}

// Load the list
function getProductList(params) {		

  // Execute the ajax request
  route = '<?php echo $this->url('product/listV2', ['type' => $type]) ?>' + params + '&major=' + criterion + ((dir =='ASC') ? '&dir=ASC' : '&dir=DESC');
  xhttp = new XMLHttpRequest();
  xhttp.open("GET", route, true);
  xhttp.onreadystatechange = function() {
    if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
    if (xhttp.readyState == 4) {
      if (xhttp.status == 200) {
        document.getElementById('product-list-panel').innerHTML = xhttp.responseText;

        $('#export-button').click(function () { productExport(); });

        // Connect the sort anchors
        $('.product-sort-anchor').click(function () {
          criterion = $(this).attr('id').split('-')[0];
          ascCriterion = $('.sort_anchor_up').attr('id');
          descCriterion = $('.sort_anchor_down').attr('id');
          if (criterion + '-anchor' == ascCriterion) dir = 'DESC';
          else if (criterion + '-anchor' == descCriterion) dir = 'ASC';
          else dir = 'ASC';
          getProductList(getSearchParams(''));
        });

        // Connect the detail anchors
        $('.product-detail-anchor').click(function () {
          var id = $(this).attr('id').split('_')[1];
          getProductDetail($(this).attr('id').split('_')[1], 'product');
          $(this).removeClass("btn-outline-primary").addClass("btn-primary");
        });
			
        // Connect the options anchors
        $('#option-anchor').click(function () {
          getProductDetail(0, 'options');
        });
        
        $('[data-toggle="tooltip"]').tooltip()
      }
    }
  }
  xhttp.send();
}

$('#modalForm').on('hidden.bs.modal', function (e) {
  $('.product-detail-anchor').addClass("btn-outline-primary").removeClass("btn-primary");
})

<?php 
$properties = array();

$properties['product-type'] = array('type' => 'select', 'mandatory' => true);
$properties['product-identifier'] = array('type' => 'input', 'mandatory' => true, 'maxSize' => 255);
$properties['product-caption'] = array('type' => 'input', 'mandatory' => true, 'maxSize' => 255);
$properties['product-description'] = array('type' => 'input', 'mandatory' => false, 'maxSize' => 2047);
$properties['product-is_available'] = array('type' => 'checkbox');

foreach ($context->getConfig('ppitProduct/update') as $propertyId => $options) {
	$property = $context->getConfig('ppitProduct')['properties'][$propertyId];
	if ($property['type'] == 'number') $properties['product-'.$propertyId] = array('type' => $property['type'], 'mandatory' => $options['mandatory'], 'minValue' => $property['minValue'], 'maxValue' => $property['maxValue']);
	else $properties['product-'.$propertyId] = array('type' => $property['type'], 'mandatory' => $options['mandatory'], 'maxSize' => ($property['type'] == 'textarea') ? 2047 : 255);
}

$properties['product-variant-number'] = array('type' => 'hidden');
$properties['product-price_0'] = array('type' => 'number', 'minValue' => -9999999999, 'maxValue' => 9999999999);
$properties['product-tax_1_share'] = array('type' => 'number', 'minValue' => 0, 'maxValue' => 100);
$properties['product-tax_2_share'] = array('type' => 'number', 'minValue' => 0, 'maxValue' => 100);
$properties['product-tax_3_share'] = array('type' => 'number', 'minValue' => 0, 'maxValue' => 100);
$properties['update_time'] = array('type' => 'hidden');

echo $this->partial('/partials/check-update-properties', array('entity' => 'Product', 'context' => $context, 'properties' => $properties)) 
?>

function postProductUpdate(id, action)
{

	// Check validity
	var validity = checkProductUpdateProperties(id);
	if (validity) {
	
		// Create a new FormData object.
		var formData = new FormData();
		
		// Get the properties values
<?php foreach ($properties as $propertyId => $property) : ?>
	<?php if ($property['type'] == 'input' || $property['type'] == 'date' || $property['type'] == 'textarea' || $property['type'] == 'select' || $property['type'] == 'repository' || $property['type'] == 'number' || $property['type'] == 'email' || $property['type'] == 'phone' || $property['type'] == 'hidden') : ?>
			formData.append('<?php echo $propertyId ?>', document.getElementById('<?php echo $propertyId ?>').value);
	<?php elseif ($property['type'] == 'checkbox') : ?>
			formData.append('<?php echo $propertyId ?>', ((document.getElementById('<?php echo $propertyId ?>').checked) ? 1 : 0));
	<?php endif ?>
<?php endforeach ?>

		var xhttp = new XMLHttpRequest();
		var route, target;
		route = '<?php echo $this->url('product/updateV2', ['type' => $type]) ?>' + '/' + id;
		if (action) route += '/' + action;
		xhttp.open('POST', route, true);
		// Set up a handler for when the request finishes.
		xhttp.onload = function () {
			if (xhttp.readyState == 4 <?php if (!$context->getConfig()['isTraceActive']) echo '&& xhttp.status == 200' ?>) {
                getProductList(getSearchParams(''));
				$('#product-update-panel').html(xhttp.responseText);
			}
		};
		xhttp.send(formData);
	}
	else return false;
}

function getProductUpdate(id, action) {

  var xhttp = new XMLHttpRequest();
  var route = '<?php echo $this->url('product/updateV2', ['type' => $type]) ?>' + '/' + id;
  if (action) route += '/' + action;
  xhttp.open('GET', route, true);
  xhttp.onreadystatechange = function() {
    if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
    if (xhttp.readyState == 4) {
      if (xhttp.status == 200) {
        $('#product-update-panel').html(xhttp.responseText);			
        if (id) {
          $('#product-update-anchor').click(function () { 
            $('[data-toggle="tooltip"]').tooltip('hide');
            getProductUpdate(id, 'update'); 
          });
          $('#product-delete-anchor').click(function () { 
            $('[data-toggle="tooltip"]').tooltip('hide');
            getProductUpdate(id, 'delete'); 
          });
          $('#up-cancel-button').click(function () { getProductUpdate(id, ''); });
          $('#cancel-button').click(function () { getProductUpdate(id, ''); });
        }
        else $('#product-add-anchor').click(function () { 
          $('[data-toggle="tooltip"]').tooltip('hide');
          getProductUpdate(id, 'add'); 
        });
        
        $('.update_date').datepicker();
        $('.update_time').timepicker({ 'timeFormat':'H:i:s', 'step': 15, 'scrollDefault': 'now' });
        $('.update_selectpicker').selectpicker();

        $('#product-up-submit-button').click(function () { postProductUpdate(id, action); });
        $('#product-submit-button').click(function () { postProductUpdate(id, action); });

        $('[data-toggle="tooltip"]').tooltip();
      }
    }
  }
  xhttp.send();
}

// Load the detail panel
function getProductDetail(id, mode) {

  // Ensure the target is displayed
  $('#form_action').show();

  // Anchor to the new panel
  $(location).attr('hash', 'form_action');

  var route = '<?php echo $this->url('product/detailV2', ['type' => $type]) ?>' + '/' + id;

  // Execute the ajax request
  xhttp = new XMLHttpRequest();
  xhttp.open("GET", route, true);
  xhttp.onreadystatechange = function() {
    if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
    if (xhttp.readyState == 4) {
      if (xhttp.status == 200) {
          
        $('#modalForm').html(xhttp.responseText);
        if (mode == 'options') {
          $('#product-title').hide();
          getOptionList($('#product_id').val(), '?', 'reference', 'ASC');
        }
        else {
          $('#option-title').hide();
          getProductUpdate(id, '');
          if (id == 0) $('#option-title').hide();
          else getOptionList($('#product_id').val(), '?', 'reference', 'ASC');
          $('#product-update-anchor').click(function () { getProductUpdate(id, 'update'); });
          $('#product-delete-anchor').click(function () { getProductUpdate(id, 'delete'); });
        }

        $('#modalForm').modal('toggle');
      }
    }
  }
  xhttp.send();

	// Highlight the clicked button (and only it in its class)
	$('.index-btn').removeClass("btn-primary").addClass("btn-default");
	if (mode == 'options') $('#option-anchor').removeClass("btn-default").addClass("btn-primary");
	else $('#product-detail-anchor_' + id).removeClass("btn-default").addClass("btn-primary");
}

getProductSearch();

</script>

<?php echo $this->partial('/ppit-core/product-option/scripts-v2') ?>
