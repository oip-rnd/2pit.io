<?php echo $this->partial('/ppit-core/account/event-account-scripts', ['type' => $content_description['options']['account_type'], 'category' => $category, 'group' => $group]) ?>

<script>
var viewBeginDate = '<?php echo date('Y-m-d') ?>';

function getAvailability() {
	var id, accounts = '', first = true;
    var begin = new Date($('#calendar').fullCalendar('getView').intervalStart);
    begin = begin.toISOString().substring(0, 10);
    var end = new Date($('#calendar').fullCalendar('getView').intervalEnd);
    end = end.toISOString().substring(0, 10);
	$('.account-checkbox').each(function () {
		if (document.getElementById($(this).attr('id')).checked) {
			id = $(this).attr('id').split('_')[1];
			if (!first) accounts += ',';
			first = false;
			accounts += $('#account_' + id).val();
		}
	});
	var route = '<?php echo $this->url('account/getAvailability') ?>' + '?accounts=' + accounts;
    route += '&begin=' + begin;
    route += '&end=' + end;
	var xhttp = new XMLHttpRequest();
	xhttp.open("GET", route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4 && xhttp.status == 200) {
			let obj = jQuery.parseJSON(xhttp.responseText);
			jQuery.each(obj, function (name, value) {
				if (value.color) {
					if (value.color.morning) {
						var event={
							id: value.date,
                            allDay: true,
							title: 'AM ' + value.n_fn,
							color: value.color.morning,
                            textColor: 'white',
							start: moment(value.date, 'YYYY-MM-DD')
						};
						$('#calendar').fullCalendar('renderEvent', event, true);
					}
					if (value.color.afternoon) {
						var event={
							id: value.date,
                            allDay: true,
							title: 'PM ' + value.n_fn,
							color: value.color.afternoon,
                            textColor: 'white',
							start: moment(value.date, 'YYYY-MM-DD')
						};
						$('#calendar').fullCalendar('renderEvent', event, true);
					}
					if (value.color.evening) {
						var event={
							id: value.date,
                            allDay: true,
							title: 'Soir ' + value.n_fn,
							color: value.color.evening,
                            textColor: 'white',
							start: moment(value.date, 'YYYY-MM-DD')
						};
						$('#calendar').fullCalendar('renderEvent', event, true);
					}
				}
			});
		}
	}
	xhttp.send();
}

// Retrieve the planning
function getPlanning(params) {
	
	// Execute the ajax request
    let begin = new Date($('#calendar').fullCalendar('getView').intervalStart);
    begin = begin.toISOString().substring(0, 10);
    let end = new Date($('#calendar').fullCalendar('getView').intervalEnd);
    end = end.toISOString().substring(0, 10);

  let accounts = '', first = true;
  $('.hidden-account_id').each(function () {
      id = $(this).val();
      if (!first) accounts += ',';
      first = false;
      accounts += id;
  });

	let route = '<?php echo $this->url('event/planning', ['type' => $type]) ?>' + params;
//    if (accounts) route += '&accounts=' + accounts;
    route += '&begin=' + begin;
    route += '&end=' + end;
    if ($('#search-groups').val()) route += '&groups=' + $('#search-groups').val();
	var xhttp = new XMLHttpRequest();
	xhttp.open("GET", route, true);
	xhttp.onreadystatechange = function() {
		if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
		if (xhttp.readyState == 4 && xhttp.status == 200) {
/*		    $('#calendar').fullCalendar({
		    	lang: '<?php echo substr($context->getLocale(), 0, 2) ?>',
		        defaultView: 'agendaWeek',
		        minTime: '08:00:00'
		    });*/
			$('#calendar').fullCalendar('removeEvents');
			let obj = jQuery.parseJSON(xhttp.responseText);

<?php if ($type == 'calendar') : ?>
            mapPlanning();
<?php endif;?>

			jQuery.each(obj, function (name, value) {
                var event={
		          id: value.id,
	              allDay: false,
		          title: value.formatted,
		          color: $('#color_' + value.account_id).val(),
	              textColor: (value.day_of_week == 0) ? $('#textColor_' + value.account_id).val() : 'grey',
				  start:  $.fullCalendar.moment(value.begin_date + ' ' + value.begin_time), 
				  end:  $.fullCalendar.moment(value.begin_date + ' ' + value.end_time)
                }
				$('#calendar').fullCalendar('renderEvent', event, true);
			});

			getAvailability();
            getConcurrencies();
		}
	}
	xhttp.send();
}

function mapPlanning() {
  var begin = new Date($('#calendar').fullCalendar('getView').intervalStart);
  begin = begin.toISOString().substring(0, 10);
  var end = new Date($('#calendar').fullCalendar('getView').intervalEnd);
  end = end.toISOString().substring(0, 10);
  var route = '<?php echo $this->url('event/mapPlanning') ?>';
    route += '?begin=' + begin;
    route += '&end=' + end;
  var xhttp = new XMLHttpRequest();
  xhttp.open("GET", route, true);
  xhttp.onreadystatechange = function() {
    if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
    if (xhttp.readyState == 4 && xhttp.status == 200) {
      let obj = jQuery.parseJSON(xhttp.responseText);
      jQuery.each(obj, function (name, value) {
 /*       value.slots.forEach(function (slot) {
	      var event={
	        id: value.date,
	        color: '#F1F1F1',
		    start:  $.fullCalendar.moment(value.date + ' ' + slot.begin_time), 
			end:  $.fullCalendar.moment(value.date + ' ' + slot.end_time)
	      };
	      $('#calendar').fullCalendar('renderEvent', event, true);
        });*/
        if (value.exception) {
          var event={
            id: value.date,
            allDay: true,
			title: '<?php echo $this->translate('Closed', 'ppit-core', $context->getLocale()) ?>',
            color: 'red',
            textColor: 'white',
            start:  $.fullCalendar.moment(value.date), 
          };
          $('#calendar').fullCalendar('renderEvent', event, true);
        }
      });
    }
  }
  xhttp.send();
}

function getConcurrencies() {
  var id, accounts = '', first = true;
  var begin = new Date($('#calendar').fullCalendar('getView').intervalStart);
  begin = begin.toISOString().substring(0, 10);
  var end = new Date($('#calendar').fullCalendar('getView').intervalEnd);
  end = end.toISOString().substring(0, 10);
  $('.account-checkbox').each(function () {
    if (document.getElementById($(this).attr('id')).checked) {
      id = $(this).attr('id').split('_')[1];
      if (!first) accounts += ',';
        first = false;
        accounts += $('#account_' + id).val();
      }
  });
  var route = '<?php echo $this->url('event/concurrencies', ['type' => $type]) ?>' + '?accounts=' + accounts;
  route += '&begin=' + begin;
  route += '&end=' + end;
  route += '&groups=' + $('#search-groups').val();
  var xhttp = new XMLHttpRequest();
  xhttp.open("GET", route, true);
  xhttp.onreadystatechange = function() {
    if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
    if (xhttp.readyState == 4 && xhttp.status == 200) {
      let obj = jQuery.parseJSON(xhttp.responseText);
      jQuery.each(obj, function (name, value) {
        var event={
          color: 'red',
          id: value.id,
          allDay: false,
          title: value.n_fn,
          start:  $.fullCalendar.moment(value.begin_date + ' ' + value.begin_time), 
          end:  $.fullCalendar.moment(value.end_date + ' ' + value.end_time)
        };
        $('#calendar').fullCalendar('renderEvent', event, true);
      });
    }
  }
  xhttp.send();
}

function connectAuditPanel()
{
  $('#audit-panel').hide();
  $('#audit-label').click(function () {
    if ($('#audit-label').text() == '<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>') {
      $('#audit-panel').show();
      $('#audit-label').text('<?php echo $this->translate('Mask', 'ppit-core', $context->getLocale()) ?>');
    }
    else {
      $('#audit-panel').hide();
      $('#audit-label').text('<?php echo $this->translate('Show', 'ppit-core', $context->getLocale()) ?>');
    }
  });
}

<?php 
$properties = array();
foreach ($content_description['update'] as $propertyId => $property) {
  if ($property['type'] != 'separator') {
    if ($property['type'] == 'number') $properties[$propertyId] = array('type' => $property['type'], 'mandatory' => $property['mandatory'], 'minValue' => $property['minValue'], 'maxValue' => $property['maxValue']);
    else $properties[$propertyId] = array('type' => $property['type'], 'mandatory' => $property['mandatory'], 'maxSize' => ($property['type'] == 'textarea') ? 2047 : 255);
  }
}
$properties['event_update_time'] = array('type' => 'hidden');

echo $this->partial('/partials/check-update-properties', array('entity' => 'Event', 'context' => $context, 'properties' => $properties)) 
?>

function connectDetail(id, action) {
        if (id) {
          $('#event-update-anchor').click(function () { 
            $('[data-toggle="tooltip"]').tooltip('hide');
            getUpdate(id, 'update'); 
          });
          $('#event-delete-anchor').click(function () { 
            $('[data-toggle="tooltip"]').tooltip('hide');
            getUpdate(id, 'delete'); 
          });
          $('#up-cancel-button').click(function () { getUpdate(id, ''); });
          $('#cancel-button').click(function () { getUpdate(id, ''); });
        }
        else $('#event-add-anchor').click(function () { 
          $('[data-toggle="tooltip"]').tooltip('hide');
          getUpdate(id, 'add'); 
        });

        $('#up-submit-button').click(function () { 
          postForm(id, action); 
        });
        $('#submit-button').click(function () {
          postForm(id, action);
        });

        $('[data-toggle="tooltip"]').tooltip();
}

function postForm(id, action)
{
  // Check validity
  var validity = checkEventUpdateProperties(id);
  if (validity) {
    
    // Create a new FormData object.
    var formData = new FormData();
      
    // Get the properties values
<?php foreach ($properties as $propertyId => $property) : ?>

  <?php if ($property['type'] == 'checkbox') : ?>
    formData.append('<?php echo $propertyId ?>', ((document.getElementById('<?php echo $propertyId ?>').checked) ? 1 : 0));

  <?php elseif ($property['type'] == 'attachment') : ?>
    var fileSelect = document.getElementById('<?php echo $propertyId ?>');
    if (fileSelect) {
      var files = fileSelect.files;
      for (var i = 0; i < files.length; i++) {
        var file = files[i];
        formData.append('<?php echo $propertyId ?>', file, file.name);
      }
    }

  <?php else : ?>
    formData.append('<?php echo $propertyId ?>', $('#<?php echo $propertyId ?>').val());

  <?php endif ?>
<?php endforeach ?>

    formData.append('is_separate_slot', ($('#is_separate_slot').prop('checked')) ? 1 : 0);
    formData.append('csrf', $('#csrf').val());

    let xhttp = new XMLHttpRequest();
    let params = getSearchParams('');
    let route = '<?php echo $this->url('event/updateAlt') ?>/' + id + '/<?php echo $type ?>' + params + '?category=' + '<?php echo $category ?>' + '&act=' + action;
    if ($('#search-groups').val()) route += '&groups=' + $('#search-groups').val();
    xhttp.open('POST', route, true);
    // Set up a handler for when the request finishes.
    xhttp.onload = function () {
      if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
      if (xhttp.readyState == 4) { 
        if (xhttp.status == 200) {
          $('#event-update-panel').html(xhttp.responseText);
          getPlanning(getSearchParams(''));
      
          $('.update_date').datepicker();
          $('.update_time').timepicker({ 'timeFormat':'H:i:s', 'step': 15, 'scrollDefault': 'now' });
          $('.update_selectpicker').selectpicker();

          if (action == 'update') connectDetail(id, '');
        
//          getAccountList('?', 'n_fn', 'ASC');
        }
        else {
          console.log(xhttp.status + ' ' + xhttp.statusText);
          toastr.error("<?php echo $this->translate('A technical error has occured. PLease try again later', 'ppit-core', $context->getLocale()) ?>");
        }
      }
    };
    xhttp.send(formData);
  }
  else return false;
}

function getUpdate(id, action) {

  let xhttp = new XMLHttpRequest();
  let params = getSearchParams('');
  let route = '<?php echo $this->url('event/updateAlt') ?>/' + id + '/<?php echo $type ?>' + params + '&category=' + '<?php echo $category ?>';
  if ($('#search-groups').val()) route += '&groups=' + $('#search-groups').val();
  if (action) route += '&act=' + action;

  xhttp.open('GET', route, true);
  xhttp.onreadystatechange = function() {
    if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
    if (xhttp.readyState == 4) {
      if (xhttp.status == 200) {
        $('#event-update-panel').html(xhttp.responseText);

<?php if (array_key_exists('goto', $planningMap)) : ?> 
        var begin_date = moment('<?php echo $planningMap['goto'] ?>', 'YYYY-MM-DD');
        $('.update_date').datepicker({ minDate: begin_date.format('DD/MM/YYYY').substr(0, 10) });
<?php else : ?>
        $('.update_date').datepicker();
<?php endif;?>

        $('.update_time').timepicker({ 'timeFormat':'H:i:s', 'step': 15, 'scrollDefault': 'now' });
        $('.update_selectpicker').selectpicker();

        connectDetail(id, action);
      }
      else {
        console.log(xhttp.status + ' ' + xhttp.statusText);
        toastr.error("<?php echo $this->translate('A technical error has occured. PLease try again later', 'ppit-core', $context->getLocale()) ?>");
      }
    }
  }
  xhttp.send();
}

function getDetail(id) {

  var xhttp = new XMLHttpRequest();
  var route = '<?php echo $this->url('event/detailAlt', ['type' => $type]) ?>/' + id;

  xhttp.open('GET', route, true);
  xhttp.onreadystatechange = function() {
    if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
    if (xhttp.readyState == 4) {
      if (xhttp.status == 200) {
        $('#modalFormBody').html(xhttp.responseText);
        $('#modalFormLabel').html($('#caption_' + id).val());
        connectAuditPanel();
        getUpdate(id, '');

        $('#modalForm').modal('toggle');
      }
      else {
        console.log(xhttp.status + ' ' + xhttp.statusText);
        toastr.error("<?php echo $this->translate('A technical error has occured. PLease try again later', 'ppit-core', $context->getLocale()) ?>");
      }
    }
  }
  xhttp.send();
}

function createCalendar(print) {
	var minTime = (print) ? '08:00:00' : '00:00:00';
    $('#calendar').fullCalendar({
    	lang: '<?php echo substr($context->getLocale(), 0, 2) ?>',
        locale: '<?php echo substr($context->getLocale(), 0, 2) ?>',
    	height: 650,
        defaultView: 'agendaWeek',
        scrollTime: '08:00:00',
        minTime: minTime,
        businessHours: {
		   	dow: [ 1, 2, 3, 4, 5, 6], // Monday - Thursday
		    start: '08:00',
		    end: '18:00'
	    },

        buttonText: {
          today: '<?php echo $this->translate('Today', 'ppit-core', $context->getLocale()) ?>',
          month: '<?php echo $this->translate('Month', 'ppit-core', $context->getLocale()) ?>',
          week: '<?php echo $this->translate('Week', 'ppit-core', $context->getLocale()) ?>',
          day: '<?php echo $this->translate('Day', 'ppit-core', $context->getLocale()) ?>',
        },

    	customButtons: {
	        addButton: {
	            text: '<?php echo $context->localize(['default' => 'Add', 'fr_FR' => 'Ajouter']) ?>',
	            click: function() {
	                getDetail(0);
			    }
			},
            testButton: {
              text: '<?php echo $this->translate('Test', 'ppit-document', $context->getLocale()) ?>',
              click: function() {
              window.open('<?php echo $this->url('event/planning', array('type' => $type)) ?>');
            }
          }
		},

        eventClick: function(event) {
          getDetail(event.id);
        },

    	header: {
			left: 'prev,next today addButton testButton',
			center: 'title',
			right: 'month,agendaWeek,agendaDay'
		}
    });

<?php if (array_key_exists('goto', $planningMap)) : ?> 
  date = moment('<?php echo $planningMap['goto'] ?>', 'YYYY-MM-DD');
  $("#calendar").fullCalendar('gotoDate', date );
<?php endif;?>

	$('.fc-prev-button').click(function(){
		var moment = $('#calendar').fullCalendar('getDate');
		viewBeginDate = moment.format().slice(0, 10);
		getPlanning(getSearchParams(''));
	});
	
	$('.fc-next-button').click(function(){
		var moment = $('#calendar').fullCalendar('getDate');
		viewBeginDate = moment.format().slice(0, 10);
		getPlanning(getSearchParams(''));
	});
}

function getEventSearch()
{
  // Process request formatting the search engine
  var xhttp = new XMLHttpRequest();
  xhttp.open("GET", '<?php echo $this->url('event/searchAlt') ?>' + '<?php echo (($type) ? '/'.$type : '') ?>', true);
  xhttp.onreadystatechange = function() {
    if (xhttp.status == 401) location.href = '<?php echo $this->url('user/expired')?>';
    if (xhttp.readyState == 4 && xhttp.status == 200) {
    
      // Update the DOM with the request html content
      $('#index-panel').html(xhttp.responseText);

      // Show the list title in default (todo) mode
      $('#mode-text').text('<?php echo $context->localize($context->getConfig('event/search'.(($type) ? '/'.$type : ''))['todoTitle']) ?>');

      // Connect the export button
      $('#export-button').click(function () { exportEventList(); });
  
      // Connect the erase button that reset all the search engine inputs and checks and refresh the list
      $('#erase-button').click(function() {
        $('.search_input').val('');
        $('.search_selectpicker').selectpicker('refresh');
        $('.search_check_value').val('0');
        $('.search_check').removeClass('btn-secondary').addClass('btn-default').removeClass('active');
        $('#erase-button').removeClass('btn-success').addClass('btn-default');
        $('#erase-button').attr('disabled', 'disabled');
        getPlanning(getSearchParams(''));
      });
      
      $('.search_selectpicker').selectpicker('refresh');
   
      // Connect the date picker on date inputs
      $('.search_input_date').datepicker();
   
      // Trigger the change event on date inputs and refresh the list
      $('.search_input_date').change(function () {
        var propertyId = $(this).attr('id').split('-')[1];
        $('#erase-button').removeClass('btn-default').addClass('btn-success');
        $('#erase-button').attr('disabled', false);
        $('#search_check-' + propertyId).removeClass('btn-default').addClass('btn-secondary').addClass('active');
        $('#search_check_value-' + propertyId).val('1');
        getPlanning(getSearchParams(''));
      }); 
   
      // Trigger the change event on select inputs and refresh the list
      $('.search_input_select').change(function () {
        var propertyId = $(this).attr('id').split('-')[1];
        $('#erase-button').removeClass('btn-default').addClass('btn-success');
        $('#erase-button').attr('disabled', false);
        $('#search_check-' + propertyId).removeClass('btn-default').addClass('btn-secondary').addClass('active');
        $('#search_check_value-' + propertyId).val('1');
        getPlanning(getSearchParams(''));
      }); 

      // Trigger the keyup event on text inputs and refresh the list
      $('.search_input_text').keyup(function () {
        var propertyId = $(this).attr('id').split('-')[1];
        $('#erase-button').removeClass('btn-default').addClass('btn-success');
        $('#erase-button').attr('disabled', false);
        $('#search_check-' + propertyId).removeClass('btn-default').addClass('btn-secondary').addClass('active');
        $('#search_check_value-' + propertyId).val('1');
        getPlanning(getSearchParams(''));
      });

      // Trigger the click event on per-property checks (allowing to search on empty values) and refresh the list
      $('.search_check').click(function() {
        $('#erase-button').removeClass('btn-default').addClass('btn-success');
        $('#erase-button').attr('disabled', false);
        var propertyId = $(this).attr('id').split('-')[1], check = 'search_check_value-' + propertyId;
        if ($('#' + check).val() == '1') {
          $(this).removeClass('btn-secondary').addClass('btn-default').removeClass('active');
          $('#' + check).val('0');
          $('#search-' + propertyId).val('');
          $('#search_min-' + propertyId).val('');
          $('#search_max-' + propertyId).val('');
//          $('#search-' + propertyId).selectpicker('refresh');
        }
        else {
          $(this).removeClass('btn-default').addClass('btn-secondary').addClass('active');
          $('#' + check).val('1');
        }
        getPlanning(getSearchParams(''));
      });
      
      getPlanning(getSearchParams(''));
    }
  }
  xhttp.send();
}

function activateCalendar() {
  createCalendar(false);
  getEventSearch();
  getAccountSearch();
}

activateCalendar();

</script>
